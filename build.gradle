buildscript {
	ext {
		springBootVersion = '1.5.6.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'


configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

version = '0.0.1'
group = 'com.github.RocketPartners'

repositories { 
   mavenLocal()
   mavenCentral() 
   /* obtains the redshift jdbc driver */
   maven { url "http://redshift-maven-repository.s3-website-us-east-1.amazonaws.com/release" }
   maven { url 'https://jitpack.io' }
}


sourceCompatibility = 1.8

dependencies {

	compile 'org.springframework.boot:spring-boot-starter-web'
	compile 'org.springframework.boot:spring-boot-starter-actuator'
	compile 'org.springframework.boot:spring-boot-starter-jdbc'
	compile 'org.springframework.boot:spring-boot-starter-test'
	compile 'net.rakugakibox.spring.boot:logback-access-spring-boot-starter:2.6.0'
	
	compile group: 'mysql', name: 'mysql-connector-java', version: '5.1.34'
	
	if (gradle.ext.liftck_snooze['addRocketSnoozeProjectToClasspath']) {
    		compile findProject(":rckt_snooze")
    }
    else {
   		compile("com.github.RocketPartners:rckt_snooze:release-0.3.x-SNAPSHOT") { changing = true }
    }
}



/************************************************************
 * Ensuring source directories are created if they do not 
 * already exist when running 'gradle eclipse'
 */
eclipse {
    classpath {
        file {
            tasks.eclipse.dependsOn("create-dirs")
        }
    }
}



/************************************************************
 * This task should be used when creating a new project as
 * it will create all source and resource directories.  This
 * task is automatically executed during the 
 * 'gradle eclipse' command.
 */
task "create-dirs" {
    doLast {
       sourceSets*.java.srcDirs*.each { it.mkdirs() }
       sourceSets*.resources.srcDirs*.each { it.mkdirs() }
   }
}



/************************************************************
 * This task is used to update the image tag name inside the
 * taskdef.json file.  The updated file is copied to the build dir.
 * Usage: gradle updateTaskDefImageTagName -PimageTagName=someAwesomeTagNameGoesHere
 */
import org.apache.tools.ant.filters.ReplaceTokens

task updateTaskDefImageTagName() {
	doLast {
	
		if(project.hasProperty('taskDefFile')){
			println "Using Task Def File: ${taskDefFile}"
	    }else{
	    		throw new GradleException("\"taskDefFile\" property is required. ex: -PtaskDefFile=env/your-app-name-prod/taskdef.json") 
	    }
	
	    copy {
	        from "${taskDefFile}"
		    into buildDir
		    
		    println "Updating the image tag name in the taskdef.json file"
		    
		    if(project.hasProperty('imageTagName')){
		    		println "Using Image Tag Name: ${imageTagName}"
		    		filter(ReplaceTokens, tokens: [IMAGE_TAG_NAME: imageTagName])
		    }else{
		    		throw new GradleException("\"imageTagName\" property is required. ex: -PimageTagName=myImage") 
		    }
	    }
    }
}

task sendSlackMsg() {
	doLast {
	    
		// blue #007dbc
		// green #1e8900
		// red #df3312 
	    
	    println "sendSlackMsg task is commented out, see the build.gradle file to enable.  Doing nothing."
	    
	    /*
	    
	     if(project.hasProperty('slackTitle') && project.hasProperty('slackText')){
		    		
		    	def color = "#007dbc"
			if(project.hasProperty('slackColor')){
				color = "${slackColor}"
			}	
	    		def title = "${slackTitle}"
	    		def text = "${slackText}"
		    
		    String json = "{"
	        json += "\"color\":\"${color}\","
	        json += "\"title\":\"${title}\","
	        json += "\"fallback\":\"${title}\","
	        json += "\"text\":\"${text}\"}"
		    
		    json = "{ \"attachments\": [" + json + "]}"
		    
		    def curlResult = ['curl', '-X', 'POST', '-H', "Content-Type: application/json", 'https://hooks.slack.com/services/CHANGE-THIS-TO-YOUR-WEBHOOK', '-d', json].execute().text
		    		
		 }else{
		    	throw new GradleException("\"slackTitle\" property and \"slackText\" property are required. ex: -PslackTitle=Building blah") 
		 }
		 
		 */
    		
    }
}  
